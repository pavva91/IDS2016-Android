package com.emergencyescape.greendao;

import com.emergencyescape.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "IMAGE".
 */
public class Image {

    private Long id;
    private int quote;
    /** Not-null value. */
    private String url;
    private long mapId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ImageDao myDao;

    private Maps maps;
    private Long maps__resolvedKey;


    public Image() {
    }

    public Image(Long id) {
        this.id = id;
    }

    public Image(Long id, int quote, String url, long mapId) {
        this.id = id;
        this.quote = quote;
        this.url = url;
        this.mapId = mapId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getImageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getQuote() {
        return quote;
    }

    public void setQuote(int quote) {
        this.quote = quote;
    }

    /** Not-null value. */
    public String getUrl() {
        return url;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUrl(String url) {
        this.url = url;
    }

    public long getMapId() {
        return mapId;
    }

    public void setMapId(long mapId) {
        this.mapId = mapId;
    }

    /** To-one relationship, resolved on first access. */
    public Maps getMaps() {
        long __key = this.mapId;
        if (maps__resolvedKey == null || !maps__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MapsDao targetDao = daoSession.getMapsDao();
            Maps mapsNew = targetDao.load(__key);
            synchronized (this) {
                maps = mapsNew;
            	maps__resolvedKey = __key;
            }
        }
        return maps;
    }

    public void setMaps(Maps maps) {
        if (maps == null) {
            throw new DaoException("To-one property 'mapId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.maps = maps;
            mapId = maps.getId();
            maps__resolvedKey = mapId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
