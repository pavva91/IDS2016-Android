package com.emergencyescape.greendao;

import java.util.List;
import com.emergencyescape.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "NODE".
 */
public class Node {

    private Long id;
    /** Not-null value. */
    private String code;
    private String description;
    private int quote;
    private int x;
    private int y;
    private double width;
    /** Not-null value. */
    private String type;
    private Integer n_people;
    private long mapId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NodeDao myDao;

    private Maps maps;
    private Long maps__resolvedKey;

    private List<Edge> departureToManyEdge;
    private List<Edge> destinationToManyEdge;
    private List<User> departureToManyUser;
    private List<User> destinationToManyUser;

    public Node() {
    }

    public Node(Long id) {
        this.id = id;
    }

    public Node(Long id, String code, String description, int quote, int x, int y, double width, String type, Integer n_people, long mapId) {
        this.id = id;
        this.code = code;
        this.description = description;
        this.quote = quote;
        this.x = x;
        this.y = y;
        this.width = width;
        this.type = type;
        this.n_people = n_people;
        this.mapId = mapId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNodeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getCode() {
        return code;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCode(String code) {
        this.code = code;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public int getQuote() {
        return quote;
    }

    public void setQuote(int quote) {
        this.quote = quote;
    }

    public int getX() {
        return x;
    }

    public void setX(int x) {
        this.x = x;
    }

    public int getY() {
        return y;
    }

    public void setY(int y) {
        this.y = y;
    }

    public double getWidth() {
        return width;
    }

    public void setWidth(double width) {
        this.width = width;
    }

    /** Not-null value. */
    public String getType() {
        return type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setType(String type) {
        this.type = type;
    }

    public Integer getN_people() {
        return n_people;
    }

    public void setN_people(Integer n_people) {
        this.n_people = n_people;
    }

    public long getMapId() {
        return mapId;
    }

    public void setMapId(long mapId) {
        this.mapId = mapId;
    }

    /** To-one relationship, resolved on first access. */
    public Maps getMaps() {
        long __key = this.mapId;
        if (maps__resolvedKey == null || !maps__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MapsDao targetDao = daoSession.getMapsDao();
            Maps mapsNew = targetDao.load(__key);
            synchronized (this) {
                maps = mapsNew;
            	maps__resolvedKey = __key;
            }
        }
        return maps;
    }

    public void setMaps(Maps maps) {
        if (maps == null) {
            throw new DaoException("To-one property 'mapId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.maps = maps;
            mapId = maps.getId();
            maps__resolvedKey = mapId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Edge> getDepartureToManyEdge() {
        if (departureToManyEdge == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EdgeDao targetDao = daoSession.getEdgeDao();
            List<Edge> departureToManyEdgeNew = targetDao._queryNode_DepartureToManyEdge(id);
            synchronized (this) {
                if(departureToManyEdge == null) {
                    departureToManyEdge = departureToManyEdgeNew;
                }
            }
        }
        return departureToManyEdge;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDepartureToManyEdge() {
        departureToManyEdge = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Edge> getDestinationToManyEdge() {
        if (destinationToManyEdge == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EdgeDao targetDao = daoSession.getEdgeDao();
            List<Edge> destinationToManyEdgeNew = targetDao._queryNode_DestinationToManyEdge(id);
            synchronized (this) {
                if(destinationToManyEdge == null) {
                    destinationToManyEdge = destinationToManyEdgeNew;
                }
            }
        }
        return destinationToManyEdge;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDestinationToManyEdge() {
        destinationToManyEdge = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<User> getDepartureToManyUser() {
        if (departureToManyUser == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            List<User> departureToManyUserNew = targetDao._queryNode_DepartureToManyUser(id);
            synchronized (this) {
                if(departureToManyUser == null) {
                    departureToManyUser = departureToManyUserNew;
                }
            }
        }
        return departureToManyUser;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDepartureToManyUser() {
        departureToManyUser = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<User> getDestinationToManyUser() {
        if (destinationToManyUser == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            List<User> destinationToManyUserNew = targetDao._queryNode_DestinationToManyUser(id);
            synchronized (this) {
                if(destinationToManyUser == null) {
                    destinationToManyUser = destinationToManyUserNew;
                }
            }
        }
        return destinationToManyUser;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDestinationToManyUser() {
        destinationToManyUser = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
