package com.emergencyescape.greendao;

import com.emergencyescape.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USER".
 */
public class User {

    private long id;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String password;
    /** Not-null value. */
    private String token;
    private long departureId;
    private long destinationId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private Node departureToOneUser;
    private Long departureToOneUser__resolvedKey;

    private Node destinationToOneUser;
    private Long destinationToOneUser__resolvedKey;


    public User() {
    }

    public User(long id) {
        this.id = id;
    }

    public User(long id, String name, String password, String token, long departureId, long destinationId) {
        this.id = id;
        this.name = name;
        this.password = password;
        this.token = token;
        this.departureId = departureId;
        this.destinationId = destinationId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getPassword() {
        return password;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPassword(String password) {
        this.password = password;
    }

    /** Not-null value. */
    public String getToken() {
        return token;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setToken(String token) {
        this.token = token;
    }

    public long getDepartureId() {
        return departureId;
    }

    public void setDepartureId(long departureId) {
        this.departureId = departureId;
    }

    public long getDestinationId() {
        return destinationId;
    }

    public void setDestinationId(long destinationId) {
        this.destinationId = destinationId;
    }

    /** To-one relationship, resolved on first access. */
    public Node getDepartureToOneUser() {
        long __key = this.departureId;
        if (departureToOneUser__resolvedKey == null || !departureToOneUser__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NodeDao targetDao = daoSession.getNodeDao();
            Node departureToOneUserNew = targetDao.load(__key);
            synchronized (this) {
                departureToOneUser = departureToOneUserNew;
            	departureToOneUser__resolvedKey = __key;
            }
        }
        return departureToOneUser;
    }

    public void setDepartureToOneUser(Node departureToOneUser) {
        if (departureToOneUser == null) {
            throw new DaoException("To-one property 'departureId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.departureToOneUser = departureToOneUser;
            departureId = departureToOneUser.getId();
            departureToOneUser__resolvedKey = departureId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Node getDestinationToOneUser() {
        long __key = this.destinationId;
        if (destinationToOneUser__resolvedKey == null || !destinationToOneUser__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NodeDao targetDao = daoSession.getNodeDao();
            Node destinationToOneUserNew = targetDao.load(__key);
            synchronized (this) {
                destinationToOneUser = destinationToOneUserNew;
            	destinationToOneUser__resolvedKey = __key;
            }
        }
        return destinationToOneUser;
    }

    public void setDestinationToOneUser(Node destinationToOneUser) {
        if (destinationToOneUser == null) {
            throw new DaoException("To-one property 'destinationId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.destinationToOneUser = destinationToOneUser;
            destinationId = destinationToOneUser.getId();
            destinationToOneUser__resolvedKey = destinationId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
